<Window x:Class="MyDev.Views.TreeViews"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MyDev.Views"
        xmlns:att="clr-namespace:MyDev.AttachedProperties"
        xmlns:model="clr-namespace:MyDev.ViewModels"
        xmlns:views="clr-namespace:MyDev.Views"
        xmlns:userctrl="clr-namespace:MyDev.UserControls"
        xmlns:conv="clr-namespace:MyDev.Converts"
	  KeyDown="Window_KeyDown"
	  xmlns:behaviors="clr-namespace:MyDev.ViewModels"
        mc:Ignorable="d"
	  Loaded="Window_Loaded" 
      PreviewKeyDown="TREEViews_KeyDown"
	  Closing="TREEViews_Closing"
	  Name="TREEViews"
  	  ResizeMode="CanResizeWithGrip"
        Title="Mullti Tree Views wiith Grid Spliiters"
        Height="550" Width="880"
	  MinHeight="450" MinWidth="880">
    <Window.Background>
        <LinearGradientBrush  StartPoint="1,0" EndPoint="0,0">
            <GradientStop Offset="0" Color="#FFAAAAAA" />
            <GradientStop Offset="0.3" Color="#FF6B8E95" />
            <GradientStop Offset="0.609" Color="#FF6B8E95" />
            <GradientStop Offset="1" Color="#FF14A7C1" />
            <!--<GradientStop Offset="0" Color="#FF193A44" />-->
        </LinearGradientBrush>
    </Window.Background>

    <Window.Resources>
        <conv:BoolToYesNo x:Key="boolToYesNo"/>
        <conv:EqualityConverter x:Key="EqualityConverter" />
        <conv:ReduceByParamValue x:Key="ReduceByParamValue"/>
        <!--<conv:ExpanderArgumentsConverter x:Key="ExpanderArgumentsConverter"/>-->
        <!--Command="{Binding WalkTreeViewItem}"
                                CommandParameter="1">-->
        <ContextMenu x:Key="TVContextMenu" Background="Red"
                     >
            <MenuItem Click="TriggerExpand0">

                <!--<MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ExpanderArgumentsConverter}">
                        <Binding />
                        <Binding Path="expandlevel" ElementName="1"/>
                    </MultiBinding>
                </MenuItem.CommandParameter>-->
                <MenuItem.Header >
                    <TextBlock x:Name="ctmenu"
                        Text="Open Top Level of Current Selection"
                        Background="Red"
                        Foreground="White"
                        TextWrapping="Wrap"
                        Width="{Binding ActualWidth, ElementName=TVContextMenu}"
                        Height="Auto">
                    </TextBlock>
                </MenuItem.Header>
                <MenuItem.Icon>
                    <Image Source="/Icons/folder-open.png" />
                </MenuItem.Icon>
            </MenuItem>

            <MenuItem Click="TriggerExpand1">
                <!--<MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ExpanderArgumentsConverter}">
                        <Binding />
                        <Binding Path="expandlevel" ElementName="2"/>
                    </MultiBinding>
                </MenuItem.CommandParameter>-->
                <MenuItem.Header >
                    <TextBlock x:Name="ctmenu2"
                        Text="Open 2  Levels of down Current Selection"
                        Background="Red"
                        Foreground="White"
                        TextWrapping="Wrap"
                        Width="{Binding ActualWidth, ElementName=TVContextMenu}"
                        Height="Auto">
                    </TextBlock>
                </MenuItem.Header>
                <MenuItem.Icon>
                    <Image Source="/Icons/folder-open.png" />
                </MenuItem.Icon>
            </MenuItem>

            <MenuItem Click="TriggerExpand2" >
                <MenuItem.Header >
                    <TextBlock x:Name="ctmenu3"
                        Text="Open 3 Levels down of Current Selection"
                        Background="Red"
                        Foreground="White"
                        TextWrapping="Wrap"
                        Width="{Binding ActualWidth, ElementName=TVContextMenu}"
                        Height="Auto">
                    </TextBlock>
                </MenuItem.Header>
                <MenuItem.Icon>
                    <Image Source="/Icons/folder-open.png" />
                </MenuItem.Icon>
            </MenuItem>

            <MenuItem Click="TriggerExpand3">
                <!--<MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ExpanderArgumentsConverter}">
                        <Binding />
                        <Binding Path="expandlevel" ElementName="3"/>
                    </MultiBinding>
                </MenuItem.CommandParameter>-->
                <MenuItem.Header >
                    <TextBlock x:Name="ctmenu4"
                        Text="Open 4 Levels down of Current Selection"
                        Background="Red"
                        Foreground="White"
                        TextWrapping="Wrap"
                        Width="{Binding ActualWidth, ElementName=TVContextMenu}"
                        Height="Auto">
                    </TextBlock>
                </MenuItem.Header>
                <MenuItem.Icon>
                    <Image Source="/Icons/folder-open.png" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Click="TriggerExpand4">
                <!--<MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ExpanderArgumentsConverter}">
                        <Binding />
                        <Binding Path="expandlevel" ElementName="4"/>
                    </MultiBinding>
                </MenuItem.CommandParameter>-->
                <MenuItem.Header >
                    <TextBlock x:Name="ctmenuAll"
                        Text="Open ALL Levels of Current Selection"
                        Background="Red"
                        Foreground="White"
                        TextWrapping="Wrap"
                        Width="{Binding ActualWidth, ElementName=TVContextMenu}"
                        Height="Auto">
                    </TextBlock>
                </MenuItem.Header>
                <MenuItem.Icon>
                    <Image Source="/Icons/folder-open.png" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>

        <ContextMenu x:Key="DummyContextmenu">
            <MenuItem Header="xxxxx"  >
                <MenuItem.Icon>
                    <Image Source="/Icons/symlink_directory_30px.png" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>

        <DataTemplate  x:Key="lbdrive"  >
            <StackPanel Orientation="Horizontal">
                <TextBlock x:Name="Col1" Width="70" Text="{Binding Colm1}"/>
                <TextBlock x:Name="Col2" Width="150" Text="{Binding Colm2}"/>
                <TextBlock x:Name="Col3" Width="370" Text="{Binding Colm3}"/>
                <TextBlock x:Name="Col4" Width="130" Text="{Binding Colm4}"/>
                <TextBlock x:Name="Col5" Width="145" Text="{Binding Colm5}"/>
                <TextBlock x:Name="Col6" Width="70" Text="{Binding Colm6}"/>
            </StackPanel>
        </DataTemplate>

        <Style x:Key="TxtblkStyle1" TargetType="{x:Type TextBlock}">
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="false"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Background" Value="{StaticResource Red5}"/>
                        <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                        <!--<Setter Property="CbItemText.Background" Value="{StaticResource Red5}"/>-->
                    </MultiTrigger.Setters>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="true"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Background" Value="{StaticResource Red5}"/>
                        <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                        <!--<Setter Property="CbItemText.Background" Value="{StaticResource Red5}"/>-->
                    </MultiTrigger.Setters>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ExpanderCboxStyle" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="IsSelected" Value="True">
                                <Setter Property="TextElement.Background" Value="{StaticResource Red5}"/>
                                <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                            </Trigger>-->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="false"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="Background" Value="{StaticResource Blue2}"/>
                                    <Setter Property="Foreground" Value="{StaticResource Cyan0}"/>
                                    <!--<Setter Property="CbItemText.Background" Value="{StaticResource Cyan1}"/>-->
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="Background" Value="{StaticResource Orange1}"/>
                                    <Setter Property="Foreground" Value="{StaticResource Cyan0}"/>
                                    <!--<Setter Property="CbItemText.Background" Value="{StaticResource Cyan1}"/>-->
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ComboxItemsStyle" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="IsSelected" Value="True">
                                <Setter Property="TextElement.Background" Value="{StaticResource Red5}"/>
                                <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                            </Trigger>-->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="false"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="Background" Value="{StaticResource Cyan6}"/>
                                    <Setter Property="Foreground" Value="{StaticResource Cyan0}"/>
                                    <!--<Setter Property="CbItemText.Background" Value="{StaticResource Cyan1}"/>-->
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="Background" Value="{StaticResource Red5}"/>
                                    <Setter Property="Foreground" Value="{StaticResource White0}"/>
                                    <!--<Setter Property="CbItemText.Background" Value="{StaticResource Red5}"/>-->
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="true"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="Background" Value="{StaticResource Red5}"/>
                                    <Setter Property="Foreground" Value="{StaticResource White0}"/>
                                    <!--<Setter Property="CbItemText.Background" Value="{StaticResource Red5}"/>-->
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ComboSelectionStyle" TargetType="ComboBoxItem">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="TextElement.Background" Value="{StaticResource Red5}"/>
                                <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LibraryTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="FontWeight" Value="Regular" />
                    <Setter Property="Background" Value="Red" />
                </Trigger>
            </Style.Triggers>

        </Style>

        <Style x:Key="tvselitem" TargetType="TreeViewItem">
            <Setter Property="IsExpanded" Value="True" />
            <Setter Property="IsSelected" Value="False" />
            <Style.Triggers>
                <!-- DataTrigger updates TreeViewItem selection when vm code changes CurrentNode -->
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource EqualityConverter}">
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TreeView}}" Path="DataContext.CurrentNode" />
                            <Binding />
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="IsSelected" Value="True" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--#region working styles-->
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0,0,0,0"
								 StrokeThickness="5"
								 Stroke="Black"
								 StrokeDashArray="1 2"
								 Opacity="0"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--<Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">-->
        <Style x:Key="TreeViewStyle1" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Green"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Foreground" Value="{StaticResource White0}"/>
            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Border Name="Bd"
								Grid.Column="1"                                
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="PART_Header"
									    ContentSource="Header"
									    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Border>
                            <!--TextElement.Foreground="{TemplateBinding Foreground`}"-->
                            <ItemsPresenter x:Name="ItemsHost"
								    TextElement.FontSize="{TemplateBinding FontSize}"
								  Grid.Row="1"
								  Grid.Column="1"
								  Grid.ColumnSpan="2"/>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                                <Setter Property="Foreground" Value="{StaticResource White0}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Width" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                                <Setter Property="Foreground" Value="{StaticResource White0}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Height" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                                <Setter Property="Foreground" Value="{StaticResource White0}"/>
                            </MultiTrigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{StaticResource Red5}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <!--<Condition Property="IsSelectionActive" Value="false"/>-->
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource White0}"/>
                                <Setter Property="Foreground" Value="{StaticResource Red5}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion working styles-->

        <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

        <!--// Togglebutton style - WORKS !-->
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid
							Width="25"
							Height="25"
							Background="Transparent">
                            <Path x:Name="ExpandPath"
								HorizontalAlignment="Left" 
								VerticalAlignment="Center" 
								Margin="1,1,1,1"
								Fill="{StaticResource Red5}"
								Data="M 4 0 L 15 7 L 4 15 Z"/>
                            <!--Fill="{StaticResource GlyphBrush}"-->
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Data" TargetName="ExpandPath" Value="M 9 0 L 15 15 L 0 15 Z"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#region not in use-->
        <!--// This controls the Togglebuton style above ...-->
        <!--<Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="1,0,0,0"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeViewItem}">
						<Grid >
							<Grid.ColumnDefinitions>
								<ColumnDefinition MinWidth="25" Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition/>
							</Grid.RowDefinitions>
							<ToggleButton x:Name="Expander"
					                  Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
							<Border Name="Bd"
								  Grid.Column="1"
								  Background="{TemplateBinding Background}"
								  BorderBrush="{TemplateBinding BorderBrush}"
								  BorderThickness="{TemplateBinding BorderThickness}"
								  Padding="{TemplateBinding Padding}">
								<ContentPresenter x:Name="PART_Header"
									    ContentSource="Header"
									    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									    VerticalAlignment="Center"/>
							</Border>
							<ItemsPresenter x:Name="ItemsHost"
								Grid.Row="1"
								Grid.Column="1"
								Grid.ColumnSpan="2"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="false">
								<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
							</Trigger>
							<Trigger Property="HasItems" Value="false">
								<Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="HasHeader" Value="false"/>
									<Condition Property="Width" Value="Auto"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
								</MultiTrigger.Setters>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="HasHeader" Value="false"/>
									<Condition Property="Height" Value="Auto"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter TargetName="PART_Header" Property="MinHeight" Value="25"/>
								</MultiTrigger.Setters>
							</MultiTrigger>
							
							-->
        <!--<Trigger Property="IsSelected" Value="true">
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
							</Trigger>-->

        <!--// These next 2 control color of ToggleButton when selected and/or focused-->
        <!--
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="IsSelectionActive" Value="false"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Red5}"/>
									<Setter Property="Foreground" Value="{StaticResource White0}"/>
									<Setter Property="FontWeight" Value="Regular"/>
								</MultiTrigger.Setters>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="IsSelectionActive" Value="true"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Red5}"/>
									<Setter Property="Foreground" Value="{StaticResource White0}"/>
									<Setter Property="FontWeight" Value="DemiBold"/>
								</MultiTrigger.Setters>
							</MultiTrigger>

							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>-->

        <!--#endregion not in use-->

        <Style x:Key="TvItem" TargetType="{x:Type TreeViewItem}">
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <!--<Image Width="20" Margin="3" 
								 Source="{Binding 
									RelativeSource={RelativeSource 
									Mode=FindAncestor,
									AncestorType={x:Type TreeViewItem}}, Path=Tag, 
									Converter={x:Static conv:StringToImageConverter.Instance}, 
									ConverterParameter=IsExpanded}"/>-->
                            <Image Width="20" Margin="3" 
								 Source="{Binding 
									RelativeSource={RelativeSource 
									Mode=FindAncestor,
									AncestorType={x:Type TreeViewItem}}, Path=Tag, 
									Converter={x:Static conv:TreeviewItemToImage.Instance}}"/>
                            <!--XPath=IsExpanded}"/>-->

                            <!--<Image  Height="20" Width="20">
								<Image.Source>

									<MultiBinding Converter="{x:Static conv:StringToImageMultiConverter.Instance}">
										<Binding Path="Tag" RelativeSource="{RelativeSource 
											Mode=FindAncestor,
											AncestorType={x:Type TreeViewItem}}" />
										<Binding Path="IsExpanded" ElementName="TreeViewItem" />
									</MultiBinding>
								</Image.Source>
							</Image>-->

                            <TextBlock VerticalAlignment="Center" Text="        "/>
                            <TextBlock VerticalAlignment="Center" Text="{Binding}"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>

            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Height" Value="25"/>
                        <Setter Property="Background" Value="{StaticResource Green1}"/>
                        <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                        <Setter Property="MinWidth" Value="300"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
                <!--<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsExpanded" Value="True"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
						<Setter Property="Height" Value="25"/>
						<Setter Property="Background" Value="{StaticResource Red5}"/>
						<Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
						<Setter Property="MinWidth" Value="300"/>
					</MultiTrigger.Setters>
				</MultiTrigger>-->
            </Style.Triggers>
        </Style>

    </Window.Resources>
    <!--<Window.DataContext>
		<vm:ViewModel />
	</Window.DataContext>-->

    <!--#region setup-->

    <Grid x:Name="Grid1" 
			Panel.ZIndex="0"
			Margin="0,0,0,0">
        <Grid.RowDefinitions>
            <RowDefinition Height="0" />
            <RowDefinition x:Name="orow1" Height="3*"/>
            <RowDefinition  x:Name="orow2" Height="2.3*" />
            <RowDefinition  x:Name="orow3" Height="145" />
            <RowDefinition Height="5" />
        </Grid.RowDefinitions>



        <TextBox x:Name="Duration" 
                Grid.Row="3"
                Margin="460,0,0,8" 
                Background="{StaticResource Black0}"
                Foreground="White"
                FontSize="14"
                FontWeight="Bold"
                Height="30"
                Width="90"
                Panel.ZIndex="44"
                HorizontalAlignment="Left"
                HorizontalContentAlignment="Center"
                Padding="0 4 0 0"
                Text="{Binding ExpandDuration}"
                VerticalAlignment="Bottom"
					   />
        <TextBox x:Name="Expandcounter" 
                Grid.Row="3"
                Margin="560,0,0,8" 
                Background="{StaticResource Black0}"
                FontSize="14"
                FontWeight="Bold"
                Height="30"
                Width="50"
                Panel.ZIndex="44"
                HorizontalAlignment="Left"
                HorizontalContentAlignment="Center"
                Padding="0 4 0 0"
                Text="{Binding Listboxtotal}"
                VerticalAlignment="Bottom"
					   />

        <!--#region Outer main Canvas for Flowdoc alone-->

        <!--// Covers entrie window - ZIndex=4-->
        <Canvas x:Name="canvas"   
			  Panel.ZIndex="4"
                Height="{Binding ActualHeight, ElementName=TREEViews}"
                Width="{Binding ActualWidth, ElementName=TREEViews}"
                Visibility="Hidden"
                >
            <userctrl:FlowDoc x:Name="Flowdoc" 
					Canvas.Top="100"
					Canvas.Left="200" 
					Height="100" Width="422"
					Visibility="Collapsed"
                    Fontsize="16"
					PreviewMouseLeftButtonDown="Flowdoc_PreviewMouseLeftButtonDown"
					MouseLeftButtonUp="Flowdoc_MouseLeftButtonUp"
					MouseMove= "Flowdoc_MouseMove"
					LostFocus="Flowdoc_LostFocus"
					Panel.ZIndex="4">
            </userctrl:FlowDoc>

        </Canvas>

        <!--#endregion Outer main Canvas-->

        <!--#endregion setup-->
        <!--#region TreeViews-->

        <!--// FullWidth TOP CONTAINER GRID-->
        <Grid x:Name="TopGrid" 
              Panel.ZIndex="22"
              Background="Orange"
              Grid.Row="1"
              Grid.RowSpan="2"
              Grid.ColumnSpan="6"
              Height="{Binding ActualHeight, ElementName=Grid1.orow1}"
              VerticalAlignment="Stretch"
              >
            <Grid.RowDefinitions>
                <RowDefinition x:Name="row1" Height="3*" />
                <RowDefinition x:Name="splitter" Height="25" />
                <RowDefinition  x:Name="row2" Height="2.3*" />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="5" />
                <ColumnDefinition x:Name="Col3" Width="1*" MinWidth="50"/>
                <!--<ColumnDefinition Width="20" />
                <ColumnDefinition x:Name="Col3" Width="1*" MinWidth="50" />-->
                <ColumnDefinition Width="20" />
                <ColumnDefinition x:Name="Col5" Width="1*" MinWidth="100"/>
                <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>

            <GridSplitter x:Name="hsplitter" 
				Height="25" 
				Background="Transparent" 
				Grid.Column="1"
				Grid.ColumnSpan="5"
                Grid.Row="1"
  				Margin="0,0,0,0" 
                Cursor="ScrollNS"
				Panel.ZIndex="24"
				DragStarted="LeftSplitter_DragStarted"                           
				DragCompleted="LeftSplitter_DragCompleted" 
                DragOver="Hsplitter_DragOver"
                HorizontalAlignment="Stretch" DragDelta="hsplitter_DragDelta">
                <GridSplitter.Template>
                    <ControlTemplate>
                        <Grid  Height="25">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                            </Grid.RowDefinitions>

                            <Border  BorderBrush="White" BorderThickness="1" Height="24">
                                <Border.Background>
                                    <LinearGradientBrush  StartPoint="0,0.5" EndPoint="1,0.5">
                                        <GradientStop Offset="0" Color="Purple" />
                                        <GradientStop Offset="0.5" Color="LightSkyBlue" />
                                        <GradientStop Offset="1" Color="Purple" />
                                    </LinearGradientBrush>
                                </Border.Background>

                                <StackPanel Orientation="Horizontal"                                         
                                            Height="24"
                                            HorizontalAlignment="Center"
		        		                        Panel.ZIndex="25" Grid.Row="0"  >

                                    <TextBlock 
                                               Background="Transparent"
                                               Text="{Binding LeftSplitterText, FallbackValue=Drag Up/down}" 
                                               FontSize="11" 
                                               Foreground="White"
                                               Margin="0 2 0 0"
                                               HorizontalAlignment="Center"/>

                                    <Image Source="{Binding LsplitterImage}"  Margin="15 0 0 5"
	        				    	                        Panel.ZIndex="25"  Height="20" Width="20" />

                                    <TextBlock Text="{Binding RightSplitterText, FallbackValue=Change view}"  
                                                     Padding="0 0 0 0" 
                                                    Foreground="White"
                                                    FontSize="11" 
                                                    Margin="5,2,0,0" />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </GridSplitter.Template>
            </GridSplitter>

            <GridSplitter x:Name="vsplitterright" 
				Width="20" 
				Background="Transparent" 
				Grid.Column="2"
				Grid.ColumnSpan="1"
                Grid.Row="0"
                Cursor="ScrollWE"
  				Margin="0,0,0,0" 
				Panel.ZIndex="24"
				DragStarted="VRightSplitter_DragStarted"                           
				DragCompleted="VRightSplitter_DragCompleted" 
                DragOver="VRightSplitter_DragOver"
                HorizontalAlignment="Stretch" DragDelta="vRightSplitter_DragDelta">
                <GridSplitter.Template>
                    <ControlTemplate>
                        <Grid  Width="20">

                            <Border  BorderBrush="Black" BorderThickness="1" Width="20"  Margin="0 20 0 0">
                                <Border.Background>
                                    <LinearGradientBrush  StartPoint="1,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="Purple" />
                                        <GradientStop Offset="1" Color="LightSkyBlue" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <StackPanel Orientation="Vertical"                                         
                                            Width="20"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
		        		                        Panel.ZIndex="25" Grid.Row="0"  >

                                    <Image x:Name="vsplitimage"  Source="{Binding VsplitterImage}"  Margin="0 0 0 0"
	        				    	                        Panel.ZIndex="25"  Height="20" Width="20" />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </GridSplitter.Template>
            </GridSplitter>

            <!--//=========================================================================//-->
            <!--// TOP LEFT GRID holding TWO left hand panes-->
            <Grid Grid.Row="0" 
                  Grid.Column="1" 
                  Grid.ColumnSpan="1" 
                  Background="Transparent" 
                  Panel.ZIndex="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*" MinWidth="50"/>
                    <!--<ColumnDefinition Width="20" />
                    <ColumnDefinition Width="1*" MinWidth="50" />-->
                </Grid.ColumnDefinitions>

                <!--// Left Treeview/Listbox pair vertical splitter-->
                <!--// Hidden-->
                <!--<GridSplitter x:Name="vsplitterleft" 
				Width="20" 
				Background="Transparent" 
				Grid.Column="1"
				Grid.ColumnSpan="1"
                Grid.Row="0"
  				Margin="0,0,0,0" 
				Panel.ZIndex="24"
				DragStarted="VLeftSplitter_DragStarted"                           
				DragCompleted="VLeftSplitter_DragCompleted" 
                DragOver="VLeftSplitter_DragOver"
                HorizontalAlignment="Stretch" DragDelta="vLeftSplitter_DragDelta"
                              Visibility="Visible">

                    <GridSplitter.Template>
                        <ControlTemplate>
                            <Grid  Width="20">
                                --><!--<Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                            </Grid.RowDefinitions>--><!--

                                <Border  Width="20" BorderBrush="Black" BorderThickness="1" Margin="0 20 0 0">
                                    <Border.Background>
                                        <LinearGradientBrush  StartPoint="1,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="Purple" />
                                            <GradientStop Offset="1" Color="LightSkyBlue" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <StackPanel Orientation="Vertical"   
                                        Background="Transparent"
                                        Width="20"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Panel.ZIndex="25" 
                                                Margin="0 0 0 0"
                                        Grid.Row="0"  >

                                        <Image x:Name="vsplitimage"  Source="{Binding VsplitterImage}"  Margin="0 0 0 0" Panel.ZIndex="25"  Height="20" Width="20" />
                                    </StackPanel>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </GridSplitter.Template>
                </GridSplitter>-->

                <!--#region LazyLoading LEFT side Grid-->
                <!--<Grid x:Name="Lazygrid" Grid.Row="0"  Panel.ZIndex="6" Grid.Column="0" Grid.ColumnSpan="1" Visibility="Hidden" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="20" />
                        <RowDefinition Height="1*" />
                    </Grid.RowDefinitions>

                    --><!--ItemContainerStyle="{StaticResource TreeViewStyle1}"--><!--
                    <TextBlock x:Name="LazyHeader"
                                Grid.Row="0"  Text="LazyLoading System"                                 
                                Foreground="White" 
                                HorizontalAlignment="Stretch"
                                TextAlignment="Center"
                                FontSize="11"
                                FontWeight="DemiBold"
                                Padding="0 2 0 0" 
                                Margin="0 0 20 0"
                               Width="{Binding Path=ActualWidth, ElementName=Lazygrid}"
                                Height="20"
                               Visibility="Hidden">
                        <TextBlock.Background>
                            <LinearGradientBrush  StartPoint="0,0.5" EndPoint="1,0.5">
                                <GradientStop Offset="0" Color="LightSkyBlue" />
                                <GradientStop Offset="1" Color="Purple" />
                            </LinearGradientBrush>
                        </TextBlock.Background>

                    </TextBlock>
                    --><!--ItemContainerStyle="{StaticResource LibraryTreeViewItemStyle}"--><!--
                    <TreeView x:Name="treeViewModel" 
					    Grid.Column="0" 			    
					    Grid.Row="1"
                       Panel.ZIndex="8"
					    Background="{StaticResource Yellow3}"
					    FontSize="18"
					    Foreground="White" 
				        Padding="5 5 5 5"
                        HorizontalAlignment="Stretch"
                        Loaded="treeViewModel_Loaded"
                        PreviewMouseLeftButtonDown="treeViewModel_PreviewMouseLeftButtonDown"
				        SelectedValuePath="C:\\"	
                        SelectedItemChanged="treeViewModel_SelectedItemChanged"
					    TreeViewItem.Expanded="treeViewModel_Expanded"
					    TreeViewItem.Collapsed="treeViewModel_Collapsed"
					    TreeViewItem.Selected="treeViewModel_Selected"
					    ScrollViewer.HorizontalScrollBarVisibility="Auto"
					    ScrollViewer.VerticalScrollBarVisibility="Auto"
				        Height="{Binding row1.ActualHeight, ElementName=row1,Converter={StaticResource ReduceByParamValue},ConverterParameter=50}"
				        Width="{Binding Path=Width, ElementName=Col1}"
					    MinWidth="{Binding Path=Width, ElementName=Col1}"
                              Visibility="Hidden">
                    </TreeView>

                </Grid>-->
                <!--#endregion LazyLoading LEFT side Grid-->

                <!--//Center listbox "listbox"-->
                <!--#region TOP Centre PANEL ONLY-->
                <Grid x:Name="innergrid" Grid.Row="0"  Panel.ZIndex="6" Grid.Column="1" Grid.ColumnSpan="1"  >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="20" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="29*"/>
                    </Grid.RowDefinitions>
                    <TextBlock x:Name="CurrentFolder"
                                Grid.Row="0"
                                Text="Information Panel" 
                                Foreground="White"
                                TextAlignment="Center"
                                FontSize="11"
                                FontWeight="DemiBold"
                                 Padding="0 2 0 0" 
                                Height="20" >
                                <!--Width="{Binding Path=ActualWidth, ElementName=innergrid}"-->
                        <TextBlock.Background>
                            <LinearGradientBrush  StartPoint="0,0.5" EndPoint="1,0.5">
                                <GradientStop Offset="0" Color="LightSkyBlue" />
                                <GradientStop Offset="1" Color="Purple" />
                            </LinearGradientBrush>
                        </TextBlock.Background>

                    </TextBlock>

                <ListBox x:Name="listBox" 
                                Grid.Row="1"
                                Grid.Column="1"
                                Grid.ColumnSpan="1"
                                Panel.ZIndex="6"
                                 FontSize="15" 
                                FontWeight="DemiBold"
                                IsSynchronizedWithCurrentItem="True"
                                ContextMenu="{StaticResource DummyContextmenu}"
                                PreviewMouseRightButtonDown="listBox_PreviewMouseRightButtonDown"
                                Height="{Binding row1.Height}"
                                Background="{StaticResource White4}" Grid.RowSpan="2"
                             Visibility="Visible" Margin="0,0,0,0"/>

                </Grid>
                <!--#endregion TOP Centre PANEL ONLY-->
            </Grid>

            <!--//=========================================================================//-->
            <!--// Right hand TREEVIEW only container grid-->
            <Grid x:Name="ManualGrid" Grid.Row="0" Grid.Column="3" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="20" />
                    <RowDefinition Height="1*" />
                </Grid.RowDefinitions>

                <TextBlock x:Name="testtreebanner"
                                Grid.Row="0"
                                Text="Manual Directories System" 
                                Foreground="White" 
                                HorizontalAlignment="Stretch"
                                TextAlignment="Center"
                                FontSize="11"
                                FontWeight="DemiBold"
                                Padding="0 2 0 0" 
                                Margin="0 0 0 0"
                                Width="{Binding Path=ActualWidth, ElementName=ManualGrid}"
                                Height="20" >
                    <TextBlock.Background>
                        <LinearGradientBrush  StartPoint="1,0.5" EndPoint="0,0.5">
                            <GradientStop Offset="0" Color="LightSkyBlue" />
                            <GradientStop Offset="1" Color="Purple" />
                        </LinearGradientBrush>
                    </TextBlock.Background>

                </TextBlock>


                <TreeView x:Name="TestTree"
                        Grid.Column="5"
                        Grid.Row="1"
                        Panel.ZIndex="6"
                        FontSize="16" 
                        ContextMenu="{StaticResource TVContextMenu}"
                        FontWeight="DemiBold"
                        Height="{Binding row1.Height}"
                        Width="{Binding Path=Width, ElementName=innergrid}"
                        TreeViewItem.Expanded="TestTree_Expanded"   
                        TreeViewItem.Collapsed="TestTree_Collapsed"  
                        PreviewMouseRightButtonDown="TestTree_PreviewMouseRightButtonDown"
                        Visibility="Visible"
                        Background="{StaticResource Cyan0}" 
                          Foreground="White" Grid.RowSpan="1">
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
                        </Style>
                    </TreeView.ItemContainerStyle>
                    <TreeViewItem
                        Foreground="White">
                    </TreeViewItem>
                    <!--Style="{StaticResource LibraryTreeViewItemStyle}"-->
                </TreeView>


                <TreeView x:Name="xtreeView4" 
				    DataContext="{Binding this}"
					Grid.Column="5"
					Grid.Row="1"
					Background="Green"
					  Panel.ZIndex="6"
                      FontSize="16"
					Foreground="White" 
					Padding="5 5 5 5"
				    PreviewMouseRightButtonDown="treeView4_PreviewMouseRightButtonDown"
					MouseDoubleClick="treeView4_MouseDoubleClick"
                  PreviewMouseLeftButtonDown="treeView4_PreviewMouseLeftButtonDown"
					SelectedItemChanged="treeView4_SelectedItemChanged"
					TreeViewItem.Expanded="TreeViewItem4_Expanded"
					TreeViewItem.Collapsed="treeView4_Collapsed"
					HorizontalAlignment="Stretch" 
					ScrollViewer.HorizontalScrollBarVisibility="Auto"
					ScrollViewer.VerticalScrollBarVisibility="Auto" 
					TreeViewItem.Selected="treeView4_Selected"
				    Height="{Binding row1.ActualHeight, ElementName=row1,Converter={StaticResource ReduceByParamValue},ConverterParameter=50}"
                  Width="{Binding Path=Width, ElementName=col3}"
                  MinWidth="{Binding Path=Width, ElementName=col3}"
                          Visibility="Hidden"
					>
                    <!--<ToggleButton Style="{StaticResource ExpandCollapseToggleStyle}"/>-->
                </TreeView>
            </Grid>
            <!--//=========================================================================//-->


            <!--LOWER GRID PANEL-->
            <!--#region lowerDrive information listbox container grid-->
            <Grid x:Name="lowergrid"
              	Grid.Row="2"
				Grid.RowSpan="1"
				Grid.Column="1"
				Grid.ColumnSpan="3"
               Height="{Binding ActualHeight, ElementName=Grid1.row2}"  
              Panel.ZIndex="2"
		>
                <ListBox x:Name="InfoList" 
						Grid.Row="0"
						 Grid.RowSpan="1"
						Grid.ColumnSpan="1"
						Panel.ZIndex="1"
						 Height="{Binding ActualHeight, ElementName=lowergrid,Converter={StaticResource ReduceByParamValue},ConverterParameter=8}"
						Width="{Binding ActualWidth, ElementName=lowergrid}"
						Background="{StaticResource Cyan0}"
						Foreground="Black"
						FontSize="14"
						FontWeight="Regular"
						Margin="0,0,0,10" 
						ScrollViewer.VerticalScrollBarVisibility="Visible"
						ScrollViewer.HorizontalScrollBarVisibility="Auto"
						IsSynchronizedWithCurrentItem="True"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Bottom"
						ItemTemplate="{StaticResource lbdrive}"
						ItemContainerStyle="{StaticResource _ListBoxItemStyle1}">
                </ListBox>
            </Grid>
            <!--#endregion lowerDrive information listbox container grid-->

        </Grid>
        <!--//End of main wrapper grid-->

        <!--#Region Buttons panel-->
        <Grid x:Name="btngrid" Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="1*" MinWidth="250"/>
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="1*" MinWidth="250" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="1.8*" MinWidth="250"/>
                <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>

            <Button x:Name="LoadDrive" 
					  Grid.Column="1"
                    Content="Load / Expand Drive"
                   Grid.ColumnSpan="4"
					  Margin="192,0,0,91" 
					  Click="TestViewModel"
				        Height="40" 
					  HorizontalAlignment="Left"
					  Template="{StaticResource HorizontalGradientTemplateYellow}"
                    Visibility="Visible"                    
					  VerticalAlignment="Bottom"
					  Width="105" >
                <!--<ContentPresenter>
                    <ContentPresenter.Content>
                        <TextBlock
                            Text="Load Single Drive + Expand" TextWrapping="Wrap" >                            
                        </TextBlock>
                    </ContentPresenter.Content>
                </ContentPresenter>-->

                <!--<Button.Foreground>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                        <GradientStop Color="#FF684900" Offset="0.514"/>
                        <GradientStop Color="#FFC3A500" Offset="0.753"/>
                        <GradientStop Color="#FFF5d816" Offset="1"/>
                    </LinearGradientBrush>
                </Button.Foreground>-->
            </Button>


            <Button x:Name="AllCloseBtn" 
						Grid.Column="5"
					Grid.Row="4"
						Margin="0,0,6,6" 
						 Click="App_Close"
						 Content="Close App"
						 Foreground="{StaticResource ResourceKey=White0}"
						 Height="40" 
						 HorizontalAlignment="Right"
						 Template="{StaticResource HorizontalGradientTemplateRed}"
						 VerticalAlignment="Bottom"
						 Width="110" />
            <Button x:Name="Close_Copy" 
						Grid.Column="5"
					Grid.ColumnSpan="2"
					Grid.Row="4"
						Margin="0,0,127,6" 
					  Click="Close_Btn"
					  Content="Close"
					  Foreground="{StaticResource ResourceKey=White0}"
					  Height="40" 
					  HorizontalAlignment="Right"
					  Template="{StaticResource HorizontalGradientTemplateGreen}"
					  VerticalAlignment="Bottom"
					  Width="110"  />
            <Button x:Name="driveinfoBtn" 
						Grid.Column="1"
						Margin="0,0,0,90" 
					  Click="ShowDriveInfo"
					  Content="Show Drive Information"
					  Foreground="White"
					  Height="40" 
					  HorizontalAlignment="Left"
					  Template="{StaticResource HorizontalGradientTemplateGreen}"
					  VerticalAlignment="Bottom"
					  Width="180"/>

            <CheckBox x:Name="ShowallFiles" IsChecked="false"
						Grid.Column="5"
					    Grid.Row="4"
						Click="ShowallFiles_Click"
						Content="Show Hidden Files ..."
						FontSize="16"
					    Foreground="White"
						Padding="0 3 0 0"
					    HorizontalAlignment="Right"
						Margin="0,17,20,0"
						VerticalAlignment="Top"/>

            <!--Background="{StaticResource Cyan1}"-->
            <!--ItemContainerStyle="{StaticResource ComboxItemsStyle}"-->
            <ComboBox x:Name="DirectoryOptions" 
  			        att:MenuAttachedProperties.NormalBackground="{StaticResource Cyan1}"
			        att:MenuAttachedProperties.NormalForeground="{StaticResource Black0}"
			        att:MenuAttachedProperties.MouseoverBackground="{StaticResource Red5}"
			        att:MenuAttachedProperties.MousoverForeground="{StaticResource White0}"
                    Height="25"                       
                      Grid.Column="5"                       
                      Margin="0,63,47,57"
                     Width="180"
                      HorizontalAlignment="Right"
                      SelectionChanged="DirectoryOptions_Selected"
                      MaxDropDownHeight="750"
                     PreviewMouseDoubleClick="treeView4_PreviewMouseDoubleClick"
                      MaxWidth="350">
                <ComboBoxItem
                     Style="{StaticResource ExpanderCboxStyle}">

                </ComboBoxItem>
                <ComboBox.ItemTemplate>
                    <DataTemplate >
                        <!--<WrapPanel Orientation="Vertical"  Background="Transparent">-->
                        <!--Width="450"-->
                        <TextBlock x:Name="CbItemText" 
                                       TextWrapping="Wrap"
                                       FontSize="14"
                                       MaxWidth="350"
                                       Width="350"
                                       Text="{Binding}"
                                       Style="{StaticResource ComboBoxTextBlockStyle2}">
                        </TextBlock>
                        <!--</WrapPanel>-->
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>

            <!--Click="ExpandGo_Click"-->
            <!--Command="{Binding WalkTreeViewItem}"-->
            <Button x:Name="ExpandGo" 
                    BorderBrush="Red"
                    BorderThickness="2"
                    Click="ExpandGo_Click"
                    Content =" Go!" 
                    Margin="222,57,0,52"
                    Grid.Column="5" 
                      HorizontalAlignment="Right"
                    Background="Yellow" 
                    Foreground="Red" 
                    FontWeight="Bold" Width="40"/>

            <ComboBox x:Name="DrivesCombo"
                     Grid.Column="3" 
                      Background="Black"
                      BorderBrush="Black"
                      BorderThickness="1"
                      Margin="47,16,0,91"
                      SelectionChanged="DrivesCombo_SelectionChanged"
                       FontWeight="DemiBold"
                      HorizontalAlignment="Left"
                      MaxDropDownHeight="330"
                      FontSize="14" Width="69">
                <!--<ComboBoxItem
                      Background="Black" 
                      Foreground="White">
                </ComboBoxItem>-->
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <Label 
							Content="{Binding}"
							Background="Black"
                            Foreground="White"
                            FontWeight="DemiBold"
                            Width="{Binding ActualWidth, ElementName= DrivesCombo}"
                            FontSize="14"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>

            </ComboBox>

            <!--Command="{Binding WalkTreeViewItem}"
                    CommandParameter="90"-->
            <Button x:Name="TriggerTreeWalkBtn" 
                Click="WalkTestTree"
                Grid.Column="3"
                Margin="124,16,0,0" 
               Height="40" 
                Content="Expand Fully"
                HorizontalAlignment="Left"
                Template="{StaticResource HorizontalGradientTemplateYellow}"
                Visibility="Visible"
                VerticalAlignment="Top"
                Width="92">
                <!--<Button.Content>
                    <TextBlock 
                        Text="Fully Expand Current Item" 
                        TextWrapping="Wrap" 
                        TextAlignment="Center"/>
                </Button.Content>
                <Button.Foreground>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                            <GradientStop Color="#FF684900" Offset="0.514"/>
                            <GradientStop Color="#FFC3A500" Offset="0.753"/>
                            <GradientStop Color="#FFF5d816" Offset="1"/>
                        </LinearGradientBrush>
                </Button.Foreground>-->
            </Button>
            <TextBox x:Name="ExpanderMenuOption" 
            Grid.Row="3"
            Grid.Column="1"
            Grid.ColumnSpan="3"
            Margin="0,0,0,48" 
            Background="{StaticResource Blue0}"
            Foreground="White"
            Height="25"
            Width="450"
            Panel.ZIndex="44"
            HorizontalAlignment="Left"
            HorizontalContentAlignment="Center"
            Padding="0 3 0 0"
            Text="Information panel ..."
            VerticalAlignment="Bottom"
                />
            <TextBox x:Name="Selection" 
                Grid.Row="3"
                Grid.Column="1"
                Grid.ColumnSpan="3"
                Margin="0,0,0,10" 
                Background="{StaticResource Red5}"
                Foreground="White"
                Height="25"
                Width="450"
                Panel.ZIndex="44"
                HorizontalAlignment="Left"
                HorizontalContentAlignment="Center"
                Padding="0 3 0 0"
                Text="Information panel ..."
                VerticalAlignment="Bottom"
                />
        </Grid>

        <TextBox x:Name="Expandprogress" 
            Grid.Row="3"
            Margin="461,0,0,46" 
            Background="{StaticResource Black0}"
            Text="{Binding ProgressString, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
            Foreground="White"
            FontSize="14"
            FontWeight="Bold"
            Height="30"
            Width="90"
            Panel.ZIndex="44"
            HorizontalAlignment="Left"
            HorizontalContentAlignment="Left"
            Padding="0 4 0 0"
            VerticalAlignment="Bottom"/>

        <TextBlock x:Name="BusyLabel" Text="Busy ..." 
                   Background="{Binding BusyLabelBkgrn}"
                   Foreground="{Binding BusyLabelColor}"
            Grid.Row="3"
                   FontSize="16"
                   Margin="562,72,251,46" RenderTransformOrigin="0.484,0.462"
                   Visibility="Hidden"/>
        <!--#endRegion Buttons panel-->

    </Grid>

</Window>
