// How to use Flowdoc in any window
 // Just include  All of  this file in your window

		#region Flowdoc support via library
		/// <summary>
		/// These methods are needed to allow FLowdoc  to work via FlowDocLib
		///  We also Need to declare an object :
		///  object MovingObject ;
		///  in the heade area just worksj
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		/// 
		// Variables Required for FlowDoc
		object MovingObject;
		private static double fdTop=100;
		private static double fdLeft=100;
		private static Thickness FdMargin =new Thickness();

		/*  
		 *  Add these  to the FlowDoc in XAML
  				PreviewMouseLeftButtonDown="Flowdoc_PreviewMouseLeftButtonDown"
				MouseLeftButtonUp="Flowdoc_MouseLeftButtonUp"
				MouseMove= "Flowdoc_MouseMove"
				LostFocus="Flowdoc_LostFocus"
*/

		// Add this startup :-			Flowdoc . ExecuteFlowDocMaxmizeMethod += new EventHandler ( MaximizeFlowDoc );
		// & of course  on closing :-	Flowdoc . ExecuteFlowDocMaxmizeMethod -= new EventHandler ( MaximizeFlowDoc );


		protected void MaximizeFlowDoc ( object sender , EventArgs e )
		{
			// Clever "Hook" method that Allows the flowdoc to be resized to fill window
			// or return to its original size and position courtesy of the Event declard in FlowDoc
			//Need to ensure the wrapping canvas is sized to its containing element (Wiindow outer Grid in this case)
			canvas . Height = Grid1 . ActualHeight;
			canvas . Width= Grid1 . ActualWidth;
			fdl . MaximizeFlowDoc ( Flowdoc , canvas , e );
		}
		// CALLED WHEN  LEFT BUTTON PRESSED
		private void Flowdoc_PreviewMouseLeftButtonDown ( object sender , MouseButtonEventArgs e )
		{
			//In this event, we get current mouse position on the control to use it in the MouseMove event.
			MovingObject = fdl . Flowdoc_PreviewMouseLeftButtonDown ( sender , Flowdoc , e );
			// NB Flowdoc remebers its last position automatically
		}
		private void Flowdoc_MouseLeftButtonUp ( object sender , MouseButtonEventArgs e )
		{
			// Window wide  !!
			// Called  when a Flowdoc MOVE has ended
			MovingObject = fdl . Flowdoc_MouseLeftButtonUp ( sender , Flowdoc , MovingObject , e );
			ReleaseMouseCapture ( );
		}
		private void Flowdoc_MouseMove ( object sender , MouseEventArgs e )
		{
			// We are Resizing the Flowdoc using the mouse on the border  (Border.Name=FdBorder)
			fdl . Flowdoc_MouseMove ( Flowdoc , canvas , MovingObject , e );
		}
		// Shortened version proxy call		
		private void Flowdoc_LostFocus ( object sender , RoutedEventArgs e )
		{
			Flowdoc . BorderClicked = false;
		}
		public void FlowDoc_ExecuteFlowDocBorderMethod ( object sender , EventArgs e )
		{
			// EVENTHANDLER to Handle resizing
			FlowDoc fd = sender as FlowDoc;
			Point pt = Mouse . GetPosition (canvas );
			double dLeft = pt.X;
			double dTop= pt.Y;
		}
		public void fdmsg ( string line1 , string line2 = "" , string line3 = "" )
		{
			//We have to pass the Flowdoc.Name, and Canvas.Name as well as up   to 3 strings of message
			//  you can  just provie one if required
			// eg fdmsg("message text");
			fdl . FdMsg ( Flowdoc , canvas , line1 , line2 , line3 );
		}


		#endregion Flowdoc support via library
